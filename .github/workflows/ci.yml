# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: ci

on:
  push:
    paths-ignore:
    - '**.gitattributes'
    - '**.gitignore'
    - '**.md'
  pull_request:
    paths-ignore:
    - '**.gitattributes'
    - '**.gitignore'
    - '**.md'

jobs:
  artifact:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: 8
        distribution: 'zulu'
    - name: Set artifact version
      run: script/version_snapshot.sh
      shell: bash
    - name: Stage artifacts
      run: mvn -B -DaltDeploymentRepository=ossrh::default::file:snapshot/ deploy
    - name: Package artifacts
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: jsonurl-maven-repository
        path: snapshot/*
    - name: Publish gh-pages
      if: ${{ success() && github.repository_owner == 'jsonurl' && github.ref == 'refs/heads/main' }}
      run: >
           script/deploy_ghpages.sh
           'doc: Update by action ${{ github.workflow }}.${{ github.job }}/${{ github.run_id }} on behalf of ${{ github.actor }} for ${{ github.event_name }} ${{ github.sha }}'
           'scm:git:https://github.com/${{ github.repository }}.git'
      shell: bash
      env:
        GH_ACTION_KEY: ${{ secrets.GH_ACTION_KEY }}

  matrix-build:
    needs: artifact
    if: ${{ needs.artifact.result == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        jdk: [8, 11, 13, 15, 17]
        distribution: [ 'zulu', 'adopt' ]
    name: Java ${{ matrix.Java }} (${{ matrix.distribution }}) sample
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK  ${{ matrix.jdk }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.jdk }}
        distribution: ${{ matrix.distribution }}
    - name: Cache Maven dependencies
      timeout-minutes: 10
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Set artifact version
      run: script/version_snapshot.sh
      shell: bash
    - name: Build with Maven
      run: mvn -P jacoco -B clean package verify --file pom.xml

  snyk:
    needs: artifact
    if: ${{ needs.artifact.result == 'success' && github.repository_owner == 'jsonurl' && ( github.event_name == 'push' || github.event.pull_request.author_association == 'OWNER' || github.event.pull_request.author_association == 'MEMBER' || github.event.pull_request.author_association == 'COLLABORATOR' ) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check ${{ github.ref }} for vulnerabilities
        uses: snyk/actions/maven-3-jdk-11@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  sonarcloud:
    needs: artifact
    if: ${{ needs.artifact.result == 'success' && github.repository_owner == 'jsonurl' && ( github.event_name == 'push' || github.event.pull_request.author_association == 'OWNER' || github.event.pull_request.author_association == 'MEMBER' || github.event.pull_request.author_association == 'COLLABORATOR' ) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0        
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'zulu'
    - name: Set artifact version
      run: script/version_snapshot.sh
      shell: bash
    - name: Cache Maven dependencies
      timeout-minutes: 10
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: SonarCloud scan of ${{ github.ref }}
      run: >
        mvn -P jacoco -B
        -Dsonar.projectKey=jsonurl-java
        -Dsonar.organization=jsonurl
        -Dsonar.host.url=https://sonarcloud.io
        -Dsonar.java.libraries=/home/runner/.m2/**/*.jar
        -Dsonar.java.test.libraries=/home/runner/.m2/**/*.jar
        package sonar:sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    

